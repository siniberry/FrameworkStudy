/* =========================================
  Main.java
  - main() 메소드가 포함된 테스트 클래스
========================================= */
package com.test.spr;

import java.lang.reflect.Proxy;

public class Main
{
	public static void main(String[] args)
	{
		// 주 업무 실행을 할 수 있는 객체 준비
		// 인터페이스 변수 = new 인터페이스구현클래스();
		// List list = new ArrayList();
		Calculator cal = new CalculatorImpl();
		
		// 주 업무 실행에 대한 테스트 → AOP 기법 적용 전
		/*
		int add = cal.add(10, 20);
		System.out.println(add);
		System.out.println();

		int sub = cal.sub(10, 20);
		System.out.println(sub);
		System.out.println();
		
		int multi = cal.multi(10, 20);
		System.out.println(multi);
		System.out.println();
		
		int div = cal.div(10, 20);
		System.out.println(div);
		System.out.println();
		*/
		
		
		// 주 업무 실행에 대한 테스트 → AOP 기법 적용 후
		//                                      프로시 객체 생성 newProxyInstance -> STATIC이다. 메모리에 올라감
		Calculator proxy = (Calculator)Proxy.newProxyInstance(
				cal.getClass().getClassLoader() 		// 주 업무 실행 클래스에 대한 정보 전달(제공) 태형정보
				// 태형이 객체.태형이객체의 틀
				, cal.getClass().getInterfaces()		// 주 업무 실행 클래스의 인터페이스에 대한 정보 전달(제공) 태형아버지정보
				, new CalculatorProxy(cal)				// 보조 업무 실행 클래스에 대한 정보 전달(제공) 아린이
				);
		
		int add = proxy.add(10, 20);
		System.out.println(add);
		System.out.println();

		int sub = proxy.sub(10, 20);
		System.out.println(sub);
		System.out.println();
		
		int multi = proxy.multi(10, 20);
		System.out.println(multi);
		System.out.println();
		
		int div = proxy.div(10, 20);
		System.out.println(div);
		System.out.println();
		
	}
}
