/* =======================================
  CalculatorProxy.java
  - 프록시 클래스
  - 보조 업무 적용 및 주 업무 호출 과정
======================================== */

// ※ Proxy 클래스를 만드는 여러가지 방법들 중
//    비교적 쉽고 직관적인 방법은
//    InvocationHandler 인터페이스를 구현하는 클래스를 만드는 것이다.

package com.test.spr;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.util.StopWatch;

// InvocationHandler -> 실리콘 가면을 만들어주는 007 가방
//              아린                         007 가방
public class CalculatorProxy implements InvocationHandler
{
	// 주요 속성 구성
	
	// target → 가짜가... 진짜 행새를 하게 될 대상 (태형)
	private Object target;
	
	// 생성자 정의
	public CalculatorProxy(Object target)
	{
		this.target = target;
	}
	
	// 보조 업무 적용 및 주 업무 호출 과정 추가
	//  누구 얼굴을 쓸 건지
	//           INVOKE는 우리가 어떻게 처리되는 지 몰라도 됨
	//           태형정보, 태형아버지정보 등을 전달 받은 것을 우리는 어떻게 처리하는 지 알 필요 없다 
	//                        아린이                   캐치해야하는 걸 넘겨주는 것
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
	{	
		// 보조 업무(cross-cutting concern) 설정
		//-- 시간 측정(Around Advice)
		Log log = LogFactory.getLog(this.getClass());
		StopWatch sw = new StopWatch();
		sw.start();
		log.info("처리 시간 측정 시작 -----------------------");
		
		// 주 업무(core concern) 실행 내용
		//							  태형  , 태형의 유전자 정보들
		Object result = method.invoke(target, args);
		
		sw.stop();
		log.info("처리 시간 측정 종료 -----------------------");
		log.info(String.format("경과시간 : %s/1000초", sw.getTotalTimeMillis()));
		
		return result;
	}
	
}
